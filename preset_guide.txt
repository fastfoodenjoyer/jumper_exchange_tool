Вы можете создать свой пресет двумя путями:
1) Изменить файл all_jumper.toml
2) Создать файд с расширением .toml и любым именем в папке presets. Количество файлов не ограничено, они автоматически будут доступны в главном меню.
В таком случае необходимо скопировать структуру с файла all_jumper.toml и дальше следовать инструкциям.


Рассмотрим структуру пресета:
[preset] - описательный блок с названием и описанием. Никак не влияют на выполнение, нужны чисто для вашего визуального удобства в меню
name = "All Jumper"
description = "Put here your description"

[functions] - задание выполняемых действий
"jumper_swap_unichain" = "Jumper Swap Unichain"

Структура действия такова:
До знака равно:
    1) Первое слово - название проекта действия или его глобального типа, в данном софте первое слово ВСЕГДА будет "jumper"
    2) Второе слово - тип действия в проекте, на данный момент доступно только "swap"
    3) Третье слово - название сети, в которой будут проходить транзакции с маленькой буквы.
    Написание такое же, как в файле settings.toml, где вы задаете RPC, только необходимо все маленькими буквами писать
После знака равно:
    Название для отображения в меню и логах. Можете писать там что хотите, как вам удобно

[repeat_actions] - в данном блоке вы указываете диапазон для выбора случайного количества повторений вашего действия.
"jumper_swap_unichain" = [1, 3]
Диапазон можно указать для каждого действия и даже для тех действий, которых нет.
По факту влиять на процесс данный блок будет только на действия перечисленные в [functions]


Далее должен начинаться блок [functions_params]
в котором вы указываете параметры для свапа отдельно для каждой сети следующим образом:
[[functions_params.swap.unichain]] - суть почти такая же как при составлении действия:
 в двойных квадратных скобках обязательно сначала "functions_params.swap." + название сети маленькими буквами

from_token = "native"
 - указываете "native" если из нативного токена сети, либо просто адрес контракта токена, доступного на jumper.exchange в этой сети

to_token = "0x078D782b760474a361dDA0AF3839290b0EF57AD6" - аналогично from_token

swap_mode = "to_and_from" - режим свапа:
"only_to" - выполняет свап ТОЛЬКО из from_token в to_token и на этом действие считается завершенным
"to_and_from" - делает свап выбранного количества from_token в to_token, а затем свапает обратно весь баланс to_token в from_token

amount = ["20", "30"] - диапазон случайного выбора количества from_token для свапа.
# amount = [1.001, 1.003]
Доступно два варианта:
1) Указание абсолютного количества from_token, например [0.001, 0.003]. В таком случае вы пишете просто нужные вам реальные числа без кавычек.
2) Указание процента от баланса from_token на кошельке. Например, при заданном ["20", "30"] выберется случайное значение между 20-30 % от баланса токена.
Этот параметр не распространяется на обратный свап в режиме "to_and_from"

slippage = 0.5 - указываете желаемый слипедж в обычных процентах, также как вы бы видели его на сайте

Также ВАЖНО:
Вы можете указать сразу несколько токенов для одной сети. Для этого вам надо для каждого токена создать аналогичный блок настроек с таким же названием [[functions_params.swap.unichain]]
То есть если вы хотите свапнуть хоть 5 разных токенов в Юничейне, то вам просто надо создать пять блоков [[functions_params.swap.unichain]] с указанием различных параметров внутри блока

И самое главное!!!
Важно сохранять общую структуру, все блоки в одинарных квадратных скобках должны присутствовать.
Пустым может быть только блок [repeat_actions], но его название все равно должно быть в пресете



Ниже я покажу пример создания пресета для свапа из BERA в USDT0 в сети Berachain И из USDC в ETH в сети Base:
[preset]
name = "BERA to USDT0 and USDC Base to ETH"
description = "Berachain swap BERA to USDT0 and on Base USDC to ETH"

[functions]
"jumper_swap_berachain" = "Jumper Swap Berachain"
"jumper_swap_base" = "Jumper Swap Base"

[repeat_actions]
# в данном случае я ничего не хочу повторять, тогда блок можно оставить пустым

[functions_params]
[[functions_params.swap.berachain]]
from_token = "native"
to_token = "0x779Ded0c9e1022225f8E0630b35a9b54bE713736" # USDT0 https://berascan.com/address/0x779Ded0c9e1022225f8E0630b35a9b54bE713736
swap_mode = "only_to"
amount = [1, 2] # свапаем в промежутке между 1 и 2 BERA
slippage = 0.5 # %

[[functions_params.swap.base]]
from_token = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913" # USDC https://basescan.org/address/0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
to_token = "native"
swap_mode = "only_to"
amount = ["80", "100"] # свапаем в промежутке между 80 и 100 % баланса USDC
slippage = 0.5 # %
